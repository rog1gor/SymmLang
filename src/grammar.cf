-- programs ------------------------------------------------

entrypoints Program ;

Prog.       Program ::= [Stmt] ;

-- statements ----------------------------------------------

Blk.        Block ::= "{" [Stmt] "}" ;
separator   Stmt ";" ;

Decl.       Stmt ::= "Let" Type Item ;
NoInit.     Item ::= Ident ;
Init.       Item ::= Ident "=" Expr ;
ReadDecl.   Stmt ::= "Read" Type Ident "=" Expr ;
separator   nonempty Item "," ;

Ass.        Stmt ::= Ident "=" Expr ;

Ret.        Stmt ::= "return" Expr ;

Cond.       Stmt ::= "if" "(" Expr ")" Block ;
CondElse.   Stmt ::= "eif" "(" Expr ")" Block "else" Block ;

While.      Stmt ::= "while" "(" Expr ")" Block ;
For.        Stmt ::= "for" "(" Ident "in" Expr "..." Expr ")" Block ;

FnDef.      Stmt ::= "Fun" Type Ident "(" [Argument] ")" Block ;
Arg.        Argument ::= Ident ;
separator   Argument "," ;

Print.      Stmt ::= "Print" "(" [Expr] ")" ;

-- types ---------------------------------------------------

Int.        Type ::= "Int" ;
Str.        Type ::= "String" ;
Bool.       Type ::= "Bool" ;
FunT.       Type ::= "FunT" ;
separator   Type "," ;

-- expressions ---------------------------------------------

EVar.       Expr6 ::= Ident ;
ELitInt.    Expr6 ::= Integer ;
ELitTrue.   Expr6 ::= "True" ;
ELitFalse.  Expr6 ::= "False" ;
EApp.       Expr6 ::= Ident "(" [Expr] ")" ;
EString.    Expr6 ::= String ;

Neg.        Expr5 ::= "-" Expr6 ;
Not.        Expr5 ::= "!" Expr6 ;

EMul.       Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;

ERel.       Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;
coercions   Expr 6 ;
separator   Expr "," ;

-- operators -----------------------------------------------

Plus.       AddOp ::= "+" ;
Minus.      AddOp ::= "-" ;
Times.      MulOp ::= "*" ;
Div.        MulOp ::= "/" ;
Mod.        MulOp ::= "%" ;

LTH.        RelOp ::= "<" ;
LE.         RelOp ::= "<=" ;
GTH.        RelOp ::= ">" ;
GE.         RelOp ::= ">=" ;
EQU.        RelOp ::= "==" ;
NE.         RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment     ":>" ;
comment     ":<" ">:" ;